import sys
import os
import pytest
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from main import start, register, login, handle_text, handle_quality_selection, download_video

import asyncio
from unittest.mock import AsyncMock, patch
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext
from main import start, register, login, handle_text, handle_quality_selection, download_video

@pytest.mark.asyncio
async def test_start_command():
    update = AsyncMock()
    update.message.text = "/start"
    await start(update, None)
    update.message.reply_text.assert_called_once_with("–ô–æ! –ö–∏–¥–∞–π –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ üé¨üî•")

@pytest.mark.asyncio
async def test_register_existing_user():
    with patch("main.is_user_logged_in", return_value=True):
        update = AsyncMock()
        await register(update, None)
        update.message.reply_text.assert_called_once_with("–¢—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –¥—Ä—É–≥ üòé –í–ø–µ—Ä—ë–¥ –∑–∞ –≤–∏–¥–æ—Å–∞–º–∏!")

@pytest.mark.asyncio
async def test_register_new_user():
    with patch("main.is_user_logged_in", return_value=False):
        update = AsyncMock()
        context = AsyncMock()
        await register(update, context)
        update.message.reply_text.assert_called_once_with("–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ üîí")
        assert context.user_data['registering']

@pytest.mark.asyncio
async def test_login_existing_user():
    with patch("main.is_user_logged_in", return_value=True):
        update = AsyncMock()
        await login(update, None)
        update.message.reply_text.assert_called_once_with("–¢—ã —É–∂–µ –≤–æ—à—ë–ª, –∫—Ä–∞—Å–∞–≤—á–∏–∫ üòè –ñ–≥–∏!")

@pytest.mark.asyncio
async def test_login_new_user():
    with patch("main.is_user_logged_in", return_value=False):
        update = AsyncMock()
        context = AsyncMock()
        await login(update, context)
        update.message.reply_text.assert_called_once_with("–í–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å, –∏ —è —Ç–µ–±—è –ø—É—â—É üö™")
        assert context.user_data['logging_in']

@pytest.mark.asyncio
async def test_handle_text_not_logged_in():
    with patch("main.is_user_logged_in", return_value=False):
        update = AsyncMock()
        context = AsyncMock()
        await handle_text(update, context)
        update.message.reply_text.assert_called_once_with("–≠–π, –∞ —Ç—ã –∫—Ç–æ? ü§® –ó–∞–ª–æ–≥–∏–Ω—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /login –∏–ª–∏ –∑–∞—Ä–µ–≥–∞–π—Å—è —á–µ—Ä–µ–∑ /register")

@pytest.mark.asyncio
async def test_download_video_invalid_url():
    update = AsyncMock()
    update.message.text = "https://example.com"
    await download_video(update, None)
    update.message.reply_text.assert_called_once_with("–•–º–º... ü§î –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ YouTube-—Å—Å—ã–ª–∫—É")

@pytest.mark.asyncio
async def test_handle_quality_selection_cancel():
    update = AsyncMock()
    context = AsyncMock()
    query = AsyncMock()
    query.data = "cancel"
    update.callback_query = query
    await handle_quality_selection(update, context)
    query.message.reply_text.assert_called_once_with("–û—Ç–º–µ–Ω–µ–Ω–æ!")
