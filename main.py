from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
import yt_dlp
import os
import datetime
import mysql.connector

from config import TELEGRAM_TOKEN, DB_HOST, DB_USER, DB_PASSWORD, DB_NAME


MAX_REQUESTS = 3
TIME_WINDOW = 60
QUALITY_TIMEOUT = 180


SUPPORT_MESSAGE_INTERVAL = datetime.timedelta(days=2)
LAST_SUPPORT_MESSAGE = None


def get_db_connection():
    return mysql.connector.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME
    )


def is_user_logged_in(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = %s", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result is not None


async def register(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if is_user_logged_in(user_id):
        await update.message.reply_text("–¢—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –¥—Ä—É–≥ üòé –í–ø–µ—Ä—ë–¥ –∑–∞ –≤–∏–¥–æ—Å–∞–º–∏!")
        return

    await update.message.reply_text("–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ üîí")
    context.user_data['registering'] = True


async def login(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if is_user_logged_in(user_id):
        await update.message.reply_text("–¢—ã —É–∂–µ –≤–æ—à—ë–ª, –∫—Ä–∞—Å–∞–≤—á–∏–∫ üòè –ñ–≥–∏!")
        return

    await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å, –∏ —è —Ç–µ–±—è –ø—É—â—É üö™")
    context.user_data['logging_in'] = True


async def handle_text(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    if context.user_data.get('registering'):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO users (telegram_id, password) VALUES (%s, %s)", (user_id, text))
        conn.commit()
        conn.close()
        context.user_data.pop('registering', None)
        await update.message.reply_text("–¢—ã –≤ –∏–≥—Ä–µ! –¢–µ–ø–µ—Ä—å –∑–∞–ª–æ–≥–∏–Ω—å—Å—è —Å –ø–æ–º–æ—â—å—é /login üîë")
        return

    if context.user_data.get('logging_in'):
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT id FROM users WHERE telegram_id = %s AND password = %s", (user_id, text))
        result = cursor.fetchone()
        conn.close()
        if result:
            context.user_data.pop('logging_in', None)
            await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –¢—ã —Ç–µ–ø–µ—Ä—å –≤ –∫–ª—É–±–µ üéâ")
        else:
            await update.message.reply_text("–£–ø—Å, –ø–∞—Ä–æ–ª—å –Ω–µ —Ç–æ—Ç ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑")
        return

    if not is_user_logged_in(user_id):
        await update.message.reply_text("–≠–π, –∞ —Ç—ã –∫—Ç–æ? ü§® –ó–∞–ª–æ–≥–∏–Ω—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /login –∏–ª–∏ –∑–∞—Ä–µ–≥–∞–π—Å—è —á–µ—Ä–µ–∑ /register")
        return

    await download_video(update, context)


async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ô–æ! –ö–∏–¥–∞–π –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ üé¨üî•")



async def send_support_message(update: Update, context: CallbackContext):
    global LAST_SUPPORT_MESSAGE
    now = datetime.datetime.now()

    if LAST_SUPPORT_MESSAGE and now - LAST_SUPPORT_MESSAGE < SUPPORT_MESSAGE_INTERVAL:
        return

    LAST_SUPPORT_MESSAGE = now

    keyboard = [
        [InlineKeyboardButton("‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url="https://www.tbank.ru/cf/7Bl1tQ07Aw6")],
        [InlineKeyboardButton("üì¢ –ú–æ–∏ —Å–æ—Ü—Å–µ—Ç–∏", url="https://t.me/JohnnySvnt")],
        [InlineKeyboardButton("üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = update.message if update.message else update.callback_query.message

    await message.reply_text(
        "üî• –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç! –ë—É–¥—É —Ä–∞–¥ –ª—é–±–æ–π –ø–æ–º–æ—â–∏ üíñ\n\n"
        "‚òï –ß–∞–π, –∫–æ—Ñ–µ, –ø–µ—á–µ–Ω—å–∫–∏ ‚Äì –≤—Å—ë –≤ –¥–µ–ª–æ!\n"
        "üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å, –±—É–¥—å –Ω–∞ —Å–≤—è–∑–∏\n"
        "üì© –û—Å—Ç–∞–≤—å —Ñ–∏–¥–±—ç–∫, —ç—Ç–æ –≤–∞–∂–Ω–æ!",
        reply_markup=reply_markup
    )


async def handle_feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, —è –≤—Å—ë —á–∏—Ç–∞—é! –°–ø–∞—Å–∏–±–æ ü§ó")


async def download_video(update: Update, context: CallbackContext):
    url = update.message.text.strip()
    if "youtube.com" not in url and "youtu.be" not in url:
        await update.message.reply_text("–•–º–º... ü§î –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ YouTube-—Å—Å—ã–ª–∫—É")
        return

    processing_message = await update.message.reply_text("–î–∞–π –º–Ω–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, —Å–µ–π—á–∞—Å –∑–∞–º—É—á—É –≤–∏–¥–æ—Å üé•‚ö°")

    try:
        ydl_opts = {'quiet': True}
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

        qualities = {
            f['format_note']: f['format_id']
            for f in info.get('formats', [])
            if 'format_note' in f and 'format_id' in f and f['format_note'] in ['144p', '240p', '360p', '480p', '720p', '1080p']
        }

        await processing_message.delete()

        if qualities:
            keyboard = [[InlineKeyboardButton(q, callback_data=q)] for q in sorted(qualities.keys())]
            keyboard.append([InlineKeyboardButton("üéµ MP3", callback_data="mp3")])
            keyboard.append([InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            quality_message = await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ üé¨", reply_markup=reply_markup)

            context.user_data.update({
                'url': url,
                'qualities': qualities,
                'info': info,
                'quality_message': quality_message
            })
        else:
            await update.message.reply_text("–£–ø—Å! –ö–∞—á–µ—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")

    except Exception as e:
        await processing_message.delete()
        await update.message.reply_text(f"–û–π, –æ—à–∏–±–æ—á–∫–∞ –≤—ã—à–ª–∞: {e} üò¢")


async def handle_quality_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.message.delete()
        await query.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ!")
        return

    url = context.user_data.get('url')
    qualities = context.user_data.get('qualities', {})
    quality_message = context.user_data.pop('quality_message', None)

    if quality_message:
        await quality_message.delete()

    if query.data == "mp3":
        sending_message = await query.message.reply_text("üé∂ –ö–∞—á–∞–µ–º –∞—É–¥–∏–æ –≤ MP3, –ø–æ–≥–æ–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
            'outtmpl': '%(title)s.%(ext)s',
            'quiet': True,
        }

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                file_name = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")

            with open(file_name, "rb") as audio_file:
                await query.message.reply_audio(audio_file)

            os.remove(file_name)

        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ MP3: {e}")

        await sending_message.delete()
        await send_support_message(update, context)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        return

    format_id = qualities.get(query.data)
    if not url or not format_id:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
        return

    sending_message = await query.message.reply_text("üì• –°–∫–∏–¥—ã–≤–∞—é –≤–∏–¥–æ—Å–∏–∫, –ø–æ–≥–æ–¥–∏ —á—É—Ç–∫–∞...")

    try:
        ydl_opts = {
            'format': f"{format_id}+bestaudio",
            'merge_output_format': 'mp4',
            'outtmpl': '%(title)s.%(ext)s',
            'quiet': True,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            file_info = ydl.extract_info(url, download=True)
            file_name = ydl.prepare_filename(file_info)

        with open(file_name, "rb") as video_file:
            await query.message.reply_video(video_file)

        os.remove(file_name)

    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    await sending_message.delete()
    await send_support_message(update, context)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏


def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("register", register))
    application.add_handler(CommandHandler("login", login))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(handle_quality_selection))
    application.run_polling()


if __name__ == '__main__':
    main()