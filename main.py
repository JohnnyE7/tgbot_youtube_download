from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext
import yt_dlp
import os
import random
import datetime

from config import TELEGRAM_TOKEN

SUPPORT_MESSAGE_INTERVAL = datetime.timedelta(days=2)  # –†–∞–∑ –≤ –¥–≤–∞ –¥–Ω—è
LAST_SUPPORT_MESSAGE = None

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube, –∏ —è –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")

async def send_support_message(update: Update, context: CallbackContext):
    global LAST_SUPPORT_MESSAGE
    now = datetime.datetime.now()

    if LAST_SUPPORT_MESSAGE and now - LAST_SUPPORT_MESSAGE < SUPPORT_MESSAGE_INTERVAL:
        return  # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 2 –¥–Ω—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ

    LAST_SUPPORT_MESSAGE = now  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

    keyboard = [
        [InlineKeyboardButton("‚òï –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url="https://www.donationalerts.com/")],
        [InlineKeyboardButton("üì¢ –ú–æ–∏ —Å–æ—Ü—Å–µ—Ç–∏", url="https://t.me/your_channel")],
        [InlineKeyboardButton("üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="feedback")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üíñ –ü–æ–¥–¥–µ—Ä–∂–∏ –ø—Ä–æ–µ–∫—Ç! –ë—É–¥—É —Ä–∞–¥ –ª—é–±–æ–π –ø–æ–º–æ—â–∏:\n\n"
        "‚òï –ß–∞–π, –∫–æ—Ñ–µ –∏ –ø–µ—á–µ–Ω—å–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—Ç—Å—è!\n"
        "üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–∏ —Å–æ—Ü—Å–µ—Ç–∏\n"
        "üì© –ù–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ",
        reply_markup=reply_markup
    )

async def handle_feedback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –∂–∞–ª–æ–±—ã. –Ø –≤—Å—ë —á–∏—Ç–∞—é, —Å–ø–∞—Å–∏–±–æ!")

async def download_video(update: Update, context: CallbackContext):
    url = update.message.text.strip()
    if "youtube.com" not in url and "youtu.be" not in url:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É YouTube.")
        return

    processing_message = await update.message.reply_text("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–æ—á–∫–µ, –ø–∞–∂–∂–∏ –º–∞–ª—å—Ü–∞ –Ω–µ –∫–∏–ø–∏—à—É–π...")

    try:
        ydl_opts = {'quiet': True}
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

        qualities = {
            f['format_note']: f['format_id']
            for f in info.get('formats', [])
            if 'format_note' in f and 'format_id' in f and f['format_note'] in ['144p', '240p', '360p', '480p', '720p', '1080p']
        }

        await processing_message.delete()

        if qualities:
            keyboard = [[InlineKeyboardButton(q, callback_data=q)] for q in sorted(qualities.keys())]
            keyboard.append([InlineKeyboardButton("üéµ –°–∫–∞—á–∞—Ç—å MP3", callback_data="mp3")])  # <-- –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É MP3
            keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            quality_message = await update.message.reply_text("–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ:", reply_markup=reply_markup)

            context.user_data.update({
                'url': url,
                'qualities': qualities,
                'info': info,
                'quality_message': quality_message
            })
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞.")

    except Exception as e:
        await processing_message.delete()
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def handle_quality_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    if query.data == "cancel":
        await query.message.delete()
        await query.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ!")
        return

    url = context.user_data.get('url')
    qualities = context.user_data.get('qualities', {})
    quality_message = context.user_data.pop('quality_message', None)

    if quality_message:
        await quality_message.delete()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ MP3
    if query.data == "mp3":
        sending_message = await query.message.reply_text("üé∂ –ö–∞—á–∞–µ–º –∞—É–¥–∏–æ –≤ MP3, –ø–æ–≥–æ–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

        ydl_opts = {
            'format': 'bestaudio/best',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',  # –ú–æ–∂–Ω–æ 128, 192, 320
            }],
            'outtmpl': '%(title)s.%(ext)s',  # –®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            'quiet': True,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å–ø–∞–º –≤ –∫–æ–Ω—Å–æ–ª–∏
        }

        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                file_name = ydl.prepare_filename(info).replace(".webm", ".mp3").replace(".m4a", ".mp3")

            with open(file_name, "rb") as audio_file:
                await query.message.reply_audio(audio_file)

            os.remove(file_name)  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ MP3: {e}")

        await sending_message.delete()
        return  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ MP3

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ
    format_id = qualities.get(query.data)
    if not url or not format_id:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
        return

    sending_message = await query.message.reply_text("üì• –°–∫–∏–¥—ã–≤–∞—é –≤–∏–¥–æ—Å–∏–∫, –ø–æ–≥–æ–¥–∏ —á—É—Ç–∫–∞...")

    try:
        ydl_opts = {
            'format': f"{format_id}+bestaudio",  # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤–∏–¥–µ–æ + –ª—É—á—à–µ–µ –∞—É–¥–∏–æ
            'merge_output_format': 'mp4',  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ mp4
            'outtmpl': '%(title)s.%(ext)s',
            'quiet': True,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            file_info = ydl.extract_info(url, download=True)
            file_name = ydl.prepare_filename(file_info)

        with open(file_name, "rb") as video_file:
            await query.message.reply_video(video_file)

        os.remove(file_name)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏

    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    await sending_message.delete()

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_video))
    application.add_handler(CallbackQueryHandler(handle_quality_selection))
    application.run_polling()

if __name__ == '__main__':
    main()
